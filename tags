!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACK	header.h	/^   unsigned char ACK:1;$/;"	m	struct:TCP_header
ACK	myheader.h	/^	unsigned char ACK:1;$/;"	m	struct:TCP_header
ARGUS	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
ARPDATA	myarphdr.h	/^typedef struct arpdata ARPDATA ;$/;"	t	typeref:struct:arpdata
ARPHDR	myarphdr.h	/^typedef  struct myarphdr ARPHDR;$/;"	t	typeref:struct:myarphdr
ARP_FRAME	RAW_PING/my_struc.h	/^}ARP_FRAME;$/;"	t	typeref:struct:arp_frame
AX_25	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
BBN_RCC_MON	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
BNA	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
BR_SAT_MON	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
CFTP	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
CHAOS	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
CPHB	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
CPNX	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
DCN_MEAS	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
DDP	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
DGP	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
EGP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
EMCON	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
ENCAP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
ETHERIP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
ETHER_FRAME	RAW_PING/my_struc.h	/^} ETHER_FRAME;$/;"	t	typeref:struct:ether_frame
ETHHDR	header.h	/^}ETHHDR;$/;"	t	typeref:struct:ethernet
ETHRENT	myheader.h	/^}ETHRENT;$/;"	t	typeref:struct:ethrnet
ETH_ADDR_LEN	header.h	30;"	d
FTN	header.h	/^   unsigned char FTN:1;$/;"	m	struct:TCP_header
FTN	myheader.h	/^	unsigned char FTN:1;$/;"	m	struct:TCP_header
GGP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
GMTP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
GRE	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
HMP	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
HW_LEN	myarphdr.h	14;"	d
ICMP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
IDPR	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
IDPR_CMTP	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
IDRP	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
IGMP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
IGP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
IGRP	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
IL	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
IP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
IPCV	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
IPIP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
IPPC	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
IP_HDR	myipv4hdr.h	/^}IP_HDR;$/;"	t	typeref:struct:ipv4_hdr
IPv6	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
IPv6_Auth	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
IPv6_Crypt	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
IPv6_Frag	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
IPv6_ICMP	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
IPv6_NoNxt	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
IPv6_Opts	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
IPv6_Route	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
IRTP	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
ISO_IP	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
ISO_TP4	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
I_NLSP	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
KRYPTOLAN	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
LARP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
LEAF_1	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
LEAF_2	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
MERIT_INP	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
MFE_NSP	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
MHRP	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
MICP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
MOBILE	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
MTP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
MUX	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
NARP	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
NETBLT	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
NSFNET_IGP	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
NVP_II	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
OBJ	Makefile	/^OBJ= read.o$/;"	m
OSPFIGP	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
OUTFILE	Makefile	/^OUTFILE = sniffer$/;"	m
PC_3	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
PRM	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
PROTOLIST	myipv4hdr.h	/^typedef enum proto_list PROTOLIST;$/;"	t	typeref:enum:proto_list
PSH	header.h	/^   unsigned char PSH:1;$/;"	m	struct:TCP_header
PSH	myheader.h	/^	unsigned char PSH:1;$/;"	m	struct:TCP_header
PUP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
PVP	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
RDP	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
REPLY_PKT	RAW_PING/my_struc.h	/^}REPLY_PKT;$/;"	t	typeref:struct:reply_pkt
RST	header.h	/^   unsigned char RST:1;$/;"	m	struct:TCP_header
RST	myheader.h	/^	unsigned char RST:1;$/;"	m	struct:TCP_header
RSVP	myipv4hdr.h	/^     IPv6_Frag, IDRP, RSVP, GRE, MHRP, BNA, IPv6_Crypt, IPv6_Auth, I_NLSP, $/;"	e	enum:proto_list
RVD	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
SAT_EXPAK	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
SAT_MON	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
SCC_SP	myipv4hdr.h	/^     LARP, MTP, AX_25, IPIP, MICP, SCC_SP, ETHERIP, ENCAP, GMTP = 100 $/;"	e	enum:proto_list
SDRP	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
SECURE_VMTPi	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
SEP	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
ST	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
SUN_ND	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
SWIPE	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
SYN	header.h	/^   unsigned char SYN:1;$/;"	m	struct:TCP_header
SYN	myheader.h	/^	unsigned char SYN:1;$/;"	m	struct:TCP_header
Sprite_RPC	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
TCF	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
TCP	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
TCP_HEADER	header.h	/^}TCP_HEADER;$/;"	t	typeref:struct:TCP_header
TCP_HEADER	myheader.h	/^}TCP_HEADER;$/;"	t	typeref:struct:TCP_header
TCP_header	header.h	/^typedef struct TCP_header {$/;"	s
TCP_header	myheader.h	/^typedef struct TCP_header {$/;"	s
TLSP	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
TP__	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
TRUNK_1	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
TRUNK_2	myipv4hdr.h	/^     TRUNK_2, LEAF_1, LEAF_2, RDP, IRTP, ISO_TP4, NETBLT, MFE_NSP, MERIT_INP, $/;"	e	enum:proto_list
TTP	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
UCL	myipv4hdr.h	/^     ICMP = 1, IGMP, GGP, IP, ST, TCP, UCL, EGP, IGP, BBN_RCC_MON, NVP_II, PUP,$/;"	e	enum:proto_list
UDP	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
UDP_HEADER	header.h	/^}UDP_HEADER;$/;"	t	typeref:struct:UDP_header
UDP_HEADER	myheader.h	/^}UDP_HEADER;$/;"	t	typeref:struct:UDP_header
UDP_header	header.h	/^typedef struct UDP_header {$/;"	s
UDP_header	myheader.h	/^typedef struct UDP_header {$/;"	s
URG	header.h	/^   unsigned char URG:1;$/;"	m	struct:TCP_header
URG	myheader.h	/^	unsigned char URG:1;$/;"	m	struct:TCP_header
Unassigned	myipv4hdr.h	/^     SWIPE, NARP, MOBILE, TLSP, Unassigned, IPv6_ICMP, IPv6_NoNxt, IPv6_Opts, $/;"	e	enum:proto_list
VINES	myipv4hdr.h	/^     SECURE_VMTPi, VINES, TTP, NSFNET_IGP, DGP, TCF, IGRP, OSPFIGP, Sprite_RPC,$/;"	e	enum:proto_list
VISA	myipv4hdr.h	/^     CFTP = 62, SAT_EXPAK = 64, KRYPTOLAN, RVD, IPPC,  SAT_MON = 69, VISA, IPCV,$/;"	e	enum:proto_list
VMTP	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
WB_EXPAK	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
WB_MON	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
WSN	myipv4hdr.h	/^     CPNX, CPHB, WSN, PVP, BR_SAT_MON, SUN_ND,  WB_MON, WB_EXPAK, ISO_IP, VMTP,$/;"	e	enum:proto_list
XNET	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
XNS_IDP	myipv4hdr.h	/^     ARGUS, EMCON, XNET, CHAOS, UDP, MUX, DCN_MEAS, HMP, PRM, XNS_IDP,TRUNK_1,$/;"	e	enum:proto_list
XTP	myipv4hdr.h	/^     SEP, PC_3, IDPR, XTP, DDP, IDPR_CMTP, TP__, IL, IPv6, SDRP, IPv6_Route , $/;"	e	enum:proto_list
__HEADER__H	header.h	14;"	d
__MYARPHDR_H	myarphdr.h	12;"	d
__MYHEADER__H	myheader.h	2;"	d
__MYIPV4_HEADER_H	myipv4hdr.h	11;"	d
ack_number	header.h	/^   unsigned  int ack_number;$/;"	m	struct:TCP_header
ack_number	myheader.h	/^	unsigned  int ack_number;$/;"	m	struct:TCP_header
ar_sha	myarphdr.h	/^  uint8_t ar_sha[HW_LEN] ;   \/** @param ar_sha  source hardware address *\/$/;"	m	struct:arpdata
ar_spa	myarphdr.h	/^  uint8_t ar_spa[4];         \/** @param ar_spa  source protocol address *\/ $/;"	m	struct:arpdata
ar_tha	myarphdr.h	/^  uint8_t ar_tha[HW_LEN];    \/** @param ar_tha  destination hardware address *\/$/;"	m	struct:arpdata
ar_tpa	myarphdr.h	/^  uint8_t ar_tpa[4] ;        \/** @param ar_tpa  destination protocol address *\/$/;"	m	struct:arpdata
arp_frame	RAW_PING/my_struc.h	/^typedef struct arp_frame {$/;"	s
arp_hdr	myarphdr.h	/^   uint16_t arp_hdr;       \/** @param arp_hdr  format of hardware address *\/$/;"	m	struct:myarphdr
arp_hln	myarphdr.h	/^   uint8_t arp_hln;        \/** @param arp_hln  length of hardware address *\/$/;"	m	struct:myarphdr
arp_op	myarphdr.h	/^   uint16_t arp_op;        \/** @param arp_op   ARP opcode (command )   *\/$/;"	m	struct:myarphdr
arp_pln	myarphdr.h	/^   uint8_t arp_pln;        \/** @param arp_pln  length of protocol address *\/$/;"	m	struct:myarphdr
arp_pro	myarphdr.h	/^   uint16_t arp_pro;       \/** @param arp_pro  format of protocol address *\/$/;"	m	struct:myarphdr
arpdata	myarphdr.h	/^struct  arpdata $/;"	s
check	myipv4hdr.h	/^	uint16_t check;     \/** @param check  Header Checksum *\/$/;"	m	struct:ipv4_hdr
daddr	myipv4hdr.h	/^	uint32_t daddr;     \/** @param daddr Destination Address *\/$/;"	m	struct:ipv4_hdr
dest	RAW_PING/my_struc.h	/^	unsigned char dest[6];$/;"	m	struct:ether_frame
dest	RAW_PING/my_struc.h	/^	unsigned char dest[6];$/;"	m	struct:reply_pkt
dest	myheader.h	/^	unsigned char dest[6];$/;"	m	struct:ethrnet
dest_ip	RAW_PING/my_struc.h	/^	unsigned char dest_ip[4];$/;"	m	struct:arp_frame
dest_ip	RAW_PING/my_struc.h	/^	unsigned char dest_ip[4];$/;"	m	struct:reply_pkt
dest_mac	RAW_PING/my_struc.h	/^	unsigned char dest_mac[6];$/;"	m	struct:arp_frame
dest_mac	RAW_PING/my_struc.h	/^	unsigned char dest_mac[6];$/;"	m	struct:reply_pkt
dest_port	header.h	/^   unsigned short int dest_port;$/;"	m	struct:UDP_header
dest_port	myheader.h	/^	unsigned short int dest_port;$/;"	m	struct:UDP_header
dest_port_number	header.h	/^   unsigned short int dest_port_number;$/;"	m	struct:TCP_header
dest_port_number	myheader.h	/^	unsigned short int dest_port_number;$/;"	m	struct:TCP_header
display_arp	read.c	/^void display_arp (char * buffer)$/;"	f
display_ipheader	read.c	/^void display_ipheader(unsigned char * buffer)$/;"	f
dst	header.h	/^   uint8_t dst[ETH_ADDR_LEN];           \/** @param dest  Destination Address *\/$/;"	m	struct:ethernet
eth_type	header.h	/^   uint16_t eth_type;          \/** @param eth_type  Ethernet Type *\/$/;"	m	struct:ethernet
ether_frame	RAW_PING/my_struc.h	/^typedef struct ether_frame {$/;"	s
ethernet	header.h	/^typedef struct ethernet {$/;"	s
ethrent_type	myheader.h	/^	unsigned short int ethrent_type;$/;"	m	struct:ethrnet
ethrnet	myheader.h	/^typedef struct ethrnet {$/;"	s
frg_off	myipv4hdr.h	/^	uint16_t frg_off;   \/** @param frg_off Fragment Offset *\/$/;"	m	struct:ipv4_hdr
ha_len	RAW_PING/my_struc.h	/^	unsigned char ha_len;$/;"	m	struct:arp_frame
ha_len	RAW_PING/my_struc.h	/^	unsigned char ha_len;$/;"	m	struct:reply_pkt
header	RAW_PING/header.h	2;"	d
header_length	header.h	/^   unsigned char header_length:4;$/;"	m	struct:TCP_header
header_length	myheader.h	/^	unsigned char header_length:4;$/;"	m	struct:TCP_header
hw_type	RAW_PING/my_struc.h	/^	unsigned short int hw_type;$/;"	m	struct:arp_frame
hw_type	RAW_PING/my_struc.h	/^	unsigned short int hw_type;$/;"	m	struct:reply_pkt
id_len	myipv4hdr.h	/^	uint16_t id_len;    \/** @param id_len  Identification number *\/$/;"	m	struct:ipv4_hdr
ihl	myipv4hdr.h	/^	uint8_t ihl:4;  \/*  it is a  octal representation *\/$/;"	m	struct:ipv4_hdr
ipv4_hdr	myipv4hdr.h	/^typedef struct ipv4_hdr {$/;"	s
length	header.h	/^   unsigned short int length;$/;"	m	struct:UDP_header
length	myheader.h	/^	unsigned short int length;$/;"	m	struct:UDP_header
main	RAW_PING/my_arp.c	/^int main()$/;"	f
main	RAW_PING/readdump.c	/^int main()$/;"	f
main	read.c	/^int main() $/;"	f
myarphdr	myarphdr.h	/^struct myarphdr$/;"	s
opcode	RAW_PING/my_struc.h	/^	unsigned short opcode;$/;"	m	struct:arp_frame
opcode	RAW_PING/my_struc.h	/^	unsigned short opcode;$/;"	m	struct:reply_pkt
p_type	RAW_PING/my_struc.h	/^	unsigned short int p_type;$/;"	m	struct:arp_frame
p_type	RAW_PING/my_struc.h	/^	unsigned short int p_type;$/;"	m	struct:reply_pkt
pa_len	RAW_PING/my_struc.h	/^	unsigned char pa_len;$/;"	m	struct:arp_frame
pa_len	RAW_PING/my_struc.h	/^	unsigned char pa_len;$/;"	m	struct:reply_pkt
proto_list	myipv4hdr.h	/^enum proto_list $/;"	g
protocol	myipv4hdr.h	/^	uint8_t  protocol;  \/** @param protocol Protocol Number *\/$/;"	m	struct:ipv4_hdr
protoname	myipv4hdr.h	/^char *protoname[] = {$/;"	v
quiet_cmd_cc_o_cc	Makefile	/^quiet_cmd_cc_o_cc  = @ echo "GEN  $(PWD)\/$@ "$/;"	m
reply_pkt	RAW_PING/my_struc.h	/^typedef struct reply_pkt {$/;"	s
reserved	header.h	/^   unsigned char reserved:6;$/;"	m	struct:TCP_header
reserved	myheader.h	/^	unsigned char reserved:6;$/;"	m	struct:TCP_header
saddr	myipv4hdr.h	/^	uint32_t saddr;     \/** @param saddr Source Address *\/$/;"	m	struct:ipv4_hdr
sequence_number	header.h	/^   unsigned int  sequence_number;$/;"	m	struct:TCP_header
sequence_number	myheader.h	/^	unsigned int  sequence_number;$/;"	m	struct:TCP_header
size	RAW_PING/header.h	23;"	d
size	read.c	21;"	d	file:
source	myheader.h	/^	unsigned char source[6];$/;"	m	struct:ethrnet
source_port	header.h	/^   unsigned short int source_port;$/;"	m	struct:UDP_header
source_port	myheader.h	/^	unsigned short int source_port;$/;"	m	struct:UDP_header
source_port_number	header.h	/^   unsigned short int source_port_number;$/;"	m	struct:TCP_header
source_port_number	myheader.h	/^	unsigned short int source_port_number;$/;"	m	struct:TCP_header
src	RAW_PING/my_struc.h	/^	unsigned char src[6];$/;"	m	struct:ether_frame
src	RAW_PING/my_struc.h	/^	unsigned char src[6];$/;"	m	struct:reply_pkt
src	header.h	/^   uint8_t  src[ETH_ADDR_LEN];          \/** @param src   Source Address *\/$/;"	m	struct:ethernet
src_ip	RAW_PING/my_struc.h	/^	unsigned char src_ip[4];$/;"	m	struct:arp_frame
src_ip	RAW_PING/my_struc.h	/^	unsigned char src_ip[4];$/;"	m	struct:reply_pkt
src_mac	RAW_PING/my_struc.h	/^	unsigned char src_mac[6];$/;"	m	struct:arp_frame
src_mac	RAW_PING/my_struc.h	/^	unsigned char src_mac[6];$/;"	m	struct:reply_pkt
struc	RAW_PING/my_struc.h	2;"	d
tcp_checksum	header.h	/^   unsigned short int tcp_checksum;$/;"	m	struct:TCP_header
tcp_checksum	myheader.h	/^	unsigned short int tcp_checksum;$/;"	m	struct:TCP_header
tos	myipv4hdr.h	/^	uint8_t tos;        \/** @param tos  Type Of Service  *\/$/;"	m	struct:ipv4_hdr
tot_len	myipv4hdr.h	/^	uint16_t tot_len ;  \/** @param tot_len Total bytes of packet in network byte order *\/$/;"	m	struct:ipv4_hdr
ttl	myipv4hdr.h	/^	uint8_t ttl;        \/** @param ttl  Time To Live *\/$/;"	m	struct:ipv4_hdr
type	RAW_PING/my_struc.h	/^	unsigned short int type;$/;"	m	struct:ether_frame
type	RAW_PING/my_struc.h	/^	unsigned short int type;$/;"	m	struct:reply_pkt
urgent_pointer	header.h	/^   unsigned short int urgent_pointer;$/;"	m	struct:TCP_header
urgent_pointer	myheader.h	/^	unsigned short int urgent_pointer;$/;"	m	struct:TCP_header
version	myipv4hdr.h	/^	uint8_t  version:4;  \/*  IHL Ver Vary According to  Little to Big Endian *\/$/;"	m	struct:ipv4_hdr
window_size	header.h	/^   unsigned short int window_size;$/;"	m	struct:TCP_header
window_size	myheader.h	/^	unsigned short int window_size;$/;"	m	struct:TCP_header
